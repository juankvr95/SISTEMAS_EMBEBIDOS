/*
                                      UNIVERSIDAD TÉCNICA DEL NORTE
                                          SISTEMAS EMBEBIDOS
                                         JUAN CARLOS VILATUÑA 
                                              DEBER #12
                                              
  Codificar su propia versión de algoritmo k-NN o bayesiano a su elección. 
  Este código debe aplicarse en su examen final. 
  */
  
  float entrenamiento [100][3]{
    {195,475,1},
  {194,474,1},
  {194,474,1},
  {194,475,1},
  {194,475,1},
  {194,475,1},
  {194,474,1},
  {195,475,1},
  {194,474,1},
  {194,475,1},
  {193,475,1},
  {194,475,1},
  {194,475,1},
  {195,475,1},
  {196,475,1},
  {194,474,1},
  {195,474,1},
  {195,474,1},
  {193,475,1},
  {193,475,1},
  {212,468,1},
  {211,468,1},
  {212,468,1},
  {212,469,1},
  {210,469,1},
  {211,468,1},
  {212,468,1},
  {213,468,1},
  {212,468,1},
  {211,468,1},
  {180,434,2},
  {179,435,2},
  {179,435,2},
  {178,434,2},
  {178,435,2},
  {178,434,2},
  {178,434,2},
  {178,434,2},
  {181,434,2},
  {179,434,2},
  {179,434,2},
  {168,442,2},
  {168,442,2},
  {167,442,2},
  {168,442,2},
  {168,442,2},
  {169,442,2},
  {168,442,2},
  {168,442,2},
  {169,442,2},
  {169,442,2},
  {169,442,2},
  {169,442,2},
  {168,442,2},
  {169,442,2},
  {169,442,2},
  {169,442,2},
  {169,441,2},
  {169,442,2},
  {170,442,2},
  {169,442,2},
  {156,439,2},
  {234,457,1},
  {234,457,1},
  {234,457,1},
  {233,457,1},
  {233,457,1},
  {233,457,1},
  {233,457,1},
  {233,457,1},
  {234,457,1},
  {234,457,1},
  {234,457,1},
  {217,456,1},
  {263,448,2},
  {238,436,2},
  {238,436,2},
  {237,436,2},
  {239,436,2},
  {236,436,2},
  {237,436,2},
  {236,436,2},
  {237,436,2},
  {234,437,2},
  {237,436,2},
  {236,436,2},
  {235,436,2},
  {235,436,2},
  {235,436,2},
  {235,436,2},
  {236,436,2},
  {237,436,2},
  {231,436,2},
  {187,453,2},
  {187,453,2},
  {187,453,2},
  {188,453,2},
  {188,453,2},
  {187,453,2},
  };
  
  float prueba[20][3] = {
    {214,468,1},
  {213,468,1},
  {214,467,1},
  {214,468,1},
  {214,468,1},
  {215,468,1},
  {214,468,1},
  {217,468,1},
  {213,468,1},
  {219,468,1},
  {169,441,2},
  {169,441,2},
  {169,442,2},
  {171,442,2},
  {169,442,2},
  {168,441,2},
  {169,441,2},
  {168,441,2},
  {167,441,2},
  {168,441,2},
  
  
  };
  
  float a,a1;
  int cont,cont1;
  int etiqueta1 = 1;
  int etiqueta2 = 2;
  
  void setup() {
    Serial.begin(9600);
  
  }
  
  void loop() {
    knn(2);
    delay(20000);
  }
  
  void knn(int n){
    float dt[100][2];
    float d;
    
  
    // normalizacion de datos
  
    for(int b=0; b<20; b++){
      for (int a=0; a<100; a++){
        d = sqrt(pow(prueba[b][0] - entrenamiento[a][0],2)+
                 pow(prueba[b][1] - entrenamiento[a][1],2));
                 dt[a][0] = a;
                 dt[a][1] = d;
      }
      for(int d=0; d<100; d++){
        for(int dat=0; dat<100-1 ; dat++){
          if(dt[dat][1] > dt[dat+1][1]){
             a = dt[dat][1];
             dt[dat][1] = dt[dat +1][1];
             dt[dat +1][1] = a;
             // posicion[][]
  
             a1 = dt[dat][0];
             dt[dat][0] = dt[dat +1][0];
             dt[dat +1][0] = a1;
          }
        }
      }
  
      for(int pos=0; pos<n; pos++){
        if(entrenamiento[int(dt[0][pos])][2] == 1){
          cont++;
        }else if (entrenamiento [int(dt[0][pos])][2] == 2){
          cont1++;
        }
      }
  
      //impresion datos
      if(cont > cont1){
        Serial.println(String(String(prueba[b][0])+String(",")+
                              String(prueba[b][1])+String(",")+
                              String(etiqueta1)));
        cont = 0;
        cont1 = 0;
      }
      if(cont1 > cont){
        Serial.println(String(String(prueba[b][0])+String(",")+
                              String(prueba[b][1])+String(",")+
                                String(etiqueta2)));
        cont = 0;
        cont1 = 0;
      }
      cont = 0;
      cont1 = 0;
    }
  }
