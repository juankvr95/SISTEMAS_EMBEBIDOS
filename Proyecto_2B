/*
                                    UNIVERSIDAD TÉCNICA DEL NORTE
                                        SISTEMAS EMBEBIDOS
                                     PROYECTO SEGUNDO BIMESTRE
                                GUSTAVO NAVARRETE -JUAN CARLOS VILATUÑA
 ----------------------------------------------------------------------------------------------------------------------------                                           
                               CLASIFICACIÓN DE DATOS - (BAYESIANO - K-NN)
*/

#include "dat.h"
#include "clasif.h"
#include <ListLib.h>

int tme = 0;
int port1, port2 = 0;
int i, j;
int f1, c1;
int k;
int x, x1, x2;
int cnt1, cnt2 = 0;
int t1, t2 = 0;
int colm1, colm2 = 0; 
int auxi1, auxi2 = 1000; 
int num, denom = 0;
int num2, denom2 = 0;
int num3, denom3 = 0;
int num4, denom4 = 0;
int m1, m2, m3, m4 = 0;
List <int> lista;

void setup() {
  Serial.begin(9600);
}

void loop() {

 bayesiano(0.6);
 Serial.println("-----------------------------------------------------------------------------------------------------");
 delay(10000);
 knn(3);
 Serial.println("-----------------------------------------------------------------------------------------------------");
 delay(10000);
 
}


void bayesiano(double nR) {
  double d[40][3];
  double dis, p1, p2;
  double num1=0;
  double num2=0; 
  double prob = 0;
  double dM=0;

  for (i = 0; i < 40; i++) {
    if (datos[i][2] == 1) num1++;  
    if (datos[i][2] == 2) num2++;  
  }

  for (j = 0; j < 20; j++) {
    for (i = 0; i < 40; i++) {
      dis = sqrt(pow(clas[j][0] - datos[i][0], 2) + 
                 pow(clas[j][1] - datos[i][1], 2));  
      d[i][0] = i;   
      d[i][1] = dis; 
    
  
    }
      for (x = 0; x < 40 ; x++) {
        if (d[x][1] > dM){ 
        dM = d[x][1]; 
        }
      }
     
     
      
      for (x1 = 0; x1 < 40; x1++) {
        double nume = d[x1][1]; 
        double den = dM;
        d[x1][1] = nume / den; 
        if (d[x1][1] < nR) lista.Add(x1); 
      }
      for (x2 = 0; x2 < lista.Count(); x2++) { 
        if (datos[lista[x2]][2] == 1) t1++; 
        else if (datos[lista[x2]][2] == 2) t2++; 
      }
    
    prob = double (lista.Count()) / double(40); 
    double nro = ((num1 / 40) * (t1 / num1));   
    double nro2 = ((num2 / 40) * (t2 / num2));  
    p1 = nro / prob;  
    p2 = nro2 / prob;  
    
    if (p1 > p2) {          
      Serial.println(clas[j][0]);
      Serial.println(clas[j][1]);
      delay(100);
      Serial.println(1);
    }
    else if (p1 < p2) {   
      Serial.println(clas[j][0]);
      Serial.println(clas[j][1]);
      delay(100);
      Serial.println(2);
    } else {
      Serial.println(clas[j][0]);
      Serial.println(clas[j][1]);
      delay(100);
      Serial.println(0);
    }
    lista.Clear();
    t1=0;
    t2=0;
    p1=0; 
    p2 = 0;
  }
}
void knn(int num) {
  double a1, a2, dis;
  double d[40][3];

  for ( j = 0; j < 20; j++) { 
    for ( i = 0; i < 40; i++) {
      dis = sqrt(pow(clas[j][0] - datos [i][0], 2) + 
                 pow(clas[j][1] - datos[i][1], 2));   
                  d[i][0] = i;  
                  d[i][1] = dis; 
    }
    for (f1 = 0; f1 < 40; f1++) {
      for (c1 = 0; c1 < 40 - 1; c1++) {   
        if (d[c1][1] > d[c1 + 1][1]) {  
          a1 = d[c1][1]; 
          d[c1][1] = d[c1 + 1][1];
          d[c1 + 1][1] = a1; 

          a2 = d[c1][0];  
          d[c1][0] = d[c1 + 1][0];
          d[c1 + 1][0] = a2;

        } //end if
      }//end for2
    } // end for1

    for (k = 0; k < num; k++) {
      if (datos[int(d[0][k])][2] == 1) cnt1++;  
      else if (datos[int(d[0][k])][2] == 2) cnt2++; 
    }
    if (cnt1 > cnt2) { 
      Serial.println(clas[j][0]);
      Serial.println(clas[j][1]);
      delay(100);
      Serial.println(1); 
      cnt1=0;
      cnt2 = 0;
    }
    if (cnt1 < cnt2) {  
      Serial.println(clas[j][0]);
      Serial.println(clas[j][1]);
      delay(100);
      Serial.println(2);
      cnt1 =0;
      cnt2 = 0;
    }

  }

}
